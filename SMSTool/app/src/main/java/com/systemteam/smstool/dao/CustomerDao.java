package com.systemteam.smstool.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.systemteam.smstool.bean.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER".
*/
public class CustomerDao extends AbstractDao<Customer, Long> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property PhoneNum = new Property(3, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Age = new Property(4, int.class, "age", false, "AGE");
        public final static Property Sex = new Property(5, boolean.class, "sex", false, "SEX");
        public final static Property HomeAddress = new Property(6, String.class, "homeAddress", false, "HOME_ADDRESS");
        public final static Property CompanyAddress = new Property(7, String.class, "companyAddress", false, "COMPANY_ADDRESS");
        public final static Property Remarks = new Property(8, String.class, "remarks", false, "REMARKS");
        public final static Property Time = new Property(9, java.util.Date.class, "time", false, "TIME");
        public final static Property RegisterTime = new Property(10, java.util.Date.class, "registerTime", false, "REGISTER_TIME");
    }


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"PHONE_NUM\" TEXT NOT NULL ," + // 3: phoneNum
                "\"AGE\" INTEGER NOT NULL ," + // 4: age
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"HOME_ADDRESS\" TEXT," + // 6: homeAddress
                "\"COMPANY_ADDRESS\" TEXT," + // 7: companyAddress
                "\"REMARKS\" TEXT," + // 8: remarks
                "\"TIME\" INTEGER," + // 9: time
                "\"REGISTER_TIME\" INTEGER);"); // 10: registerTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
        stmt.bindString(4, entity.getPhoneNum());
        stmt.bindLong(5, entity.getAge());
        stmt.bindLong(6, entity.getSex() ? 1L: 0L);
 
        String homeAddress = entity.getHomeAddress();
        if (homeAddress != null) {
            stmt.bindString(7, homeAddress);
        }
 
        String companyAddress = entity.getCompanyAddress();
        if (companyAddress != null) {
            stmt.bindString(8, companyAddress);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(9, remarks);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(10, time.getTime());
        }
 
        java.util.Date registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(11, registerTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
        stmt.bindString(4, entity.getPhoneNum());
        stmt.bindLong(5, entity.getAge());
        stmt.bindLong(6, entity.getSex() ? 1L: 0L);
 
        String homeAddress = entity.getHomeAddress();
        if (homeAddress != null) {
            stmt.bindString(7, homeAddress);
        }
 
        String companyAddress = entity.getCompanyAddress();
        if (companyAddress != null) {
            stmt.bindString(8, companyAddress);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(9, remarks);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(10, time.getTime());
        }
 
        java.util.Date registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(11, registerTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.getString(offset + 3), // phoneNum
            cursor.getInt(offset + 4), // age
            cursor.getShort(offset + 5) != 0, // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // homeAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // companyAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remarks
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // time
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // registerTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoneNum(cursor.getString(offset + 3));
        entity.setAge(cursor.getInt(offset + 4));
        entity.setSex(cursor.getShort(offset + 5) != 0);
        entity.setHomeAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompanyAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemarks(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setRegisterTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Customer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Customer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Customer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
